{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"abarorm","text":"abarorm is a lightweight and easy-to-use Object-Relational Mapping (ORM) library for SQLite databases in Python. It aims to provide a simple and intuitive interface for managing database models and interactions."},{"location":"index.html#features","title":"Features","text":"<ul> <li>Define models using Python classes</li> <li>Automatically handle database schema creation and management</li> <li>Support for basic CRUD operations</li> <li>Foreign key relationships</li> <li>Custom field types with validation and constraints</li> </ul>"},{"location":"index.html#installation","title":"Installation","text":"<p>You can install abarorm from PyPI using pip:</p> <pre><code>pip install abarorm\n</code></pre> <p>For MySQL support, you also need to install <code>mysql-connector-python</code>:</p> <pre><code>pip install mysql-connector-python\n</code></pre>"},{"location":"index.html#basic-usage","title":"Basic Usage","text":"<p>Here\u2019s a quick overview of how to use abarorm to define models and interact with an SQLite database.</p>"},{"location":"index.html#field-types","title":"Field Types","text":"<p>In abarorm, fields define the types of data stored in your database models. You can use built-in field types to specify the kind of data each attribute should hold. Here are the available field types and their usage:</p> <ol> <li>CharField<ul> <li>Description: Represents a text field with a maximum length.</li> <li>Parameters:<ul> <li><code>max_length</code> : The maximum number of characters allowed.</li> <li><code>unique</code> : If True, the field must contain unique values across the table.</li> <li><code>null</code> : If True, the field can contain NULL values.</li> <li><code>default</code> : The default value if none is provided.</li> </ul> </li> <li>Example: <code>python     title = CharField(max_length=100, unique=True)</code></li> </ul> </li> <li>DateTimeField<ul> <li>Description: Represents a date and time value.</li> <li>Parameters:<ul> <li><code>auto_now</code> : If True, the field will be automatically set to the current date and time whenever the record is updated.</li> </ul> </li> <li>Example: <code>python     create_time = DateTimeField(auto_now=True)</code></li> </ul> </li> <li>ForeignKey<ul> <li>Description: Represents a many-to-one relationship between models.</li> <li>Parameters: <ul> <li><code>to</code> : The model that this field points to.</li> <li><code>on_delete</code> : Defines the behavior when the referenced record is deleted. Common options include:<ul> <li><code>CASCADE</code> : Automatically delete records that reference the deleted record.</li> <li><code>SET NULL</code> : Set the field to NULL when the referenced record is deleted.</li> <li><code>PROTECT</code> : Prevent deletion of the referenced record by raising an error.</li> <li><code>SET_DEFAULT</code> : Set the field to a default value when the referenced record is deleted.</li> <li><code>DO_NOTHING</code> : Do nothing and leave the field unchanged.</li> </ul> </li> </ul> </li> <li>Example: <code>python     category = ForeignKey(Category, on_delete='CASCADE')</code></li> </ul> </li> <li>BooleanField<ul> <li>Description: Represents a Boolean value (<code>True</code> or <code>False</code>).</li> <li>Parameters:<ul> <li><code>default</code> : The default value for the field if none is provided.</li> <li><code>null</code> : if <code>True</code>, the field can contain <code>NULL</code> values.</li> </ul> </li> <li>Example: <code>python     is_active = BooleanField(default=True)</code></li> </ul> </li> <li>IntegerField<ul> <li>Description: Represents an integer value.</li> <li>Parameters:<ul> <li><code>default</code> : The default value for the field if none is provided.</li> <li><code>null</code> : If True, the field can contain NULL values.</li> </ul> </li> <li>Example: <code>py     age = IntegerField(default=0)</code></li> </ul> </li> </ol>"},{"location":"index.html#defining-models","title":"Defining Models","text":"<p>Create a new Python file (e.g., <code>models.py</code>) and define your models by inheriting from <code>SQLiteModel</code> for SQLite or <code>MySQLModel</code> for MySQL. Update your database configuration accordingly.</p> <p>Example for SQLite:</p> <pre><code>from abarorm import SQLiteModel\nfrom abarorm.fields import CharField, DateTimeField, ForeignKey\n\nDATABASE_CONFIG = {\n    'sqlite': {\n        'db_name': 'example.db',  # Name of the SQLite database file\n    }\n}\n\nclass Category(SQLiteModel):\n    table_name = 'categories'\n    title = CharField(max_length=200, unique=True)\n    def __init__(self, **kwargs):\n        # Initialize the Category model with database configuration\n        super().__init__(db_config=DATABASE_CONFIG['sqlite'], **kwargs)\n\nclass Post(SQLiteModel):\n    table_name = 'posts'\n    title = CharField(max_length=100, unique=True)\n    create_time = DateTimeField(auto_now=True)\n    category = ForeignKey(Category)\n    def __init__(self, **kwargs):\n        # Initialize the Category model with database configuration\n        super().__init__(db_config=DATABASE_CONFIG['sqlite'], **kwargs)\n</code></pre> <p>Example for MySQL:</p> <pre><code>from abarorm import MySQLModel\nfrom abarorm.fields import CharField, DateTimeField, ForeignKey\n\nDATABASE_CONFIG = {\n    'mysql': {\n        'host': 'localhost',\n        'user': 'your_user',\n        'password': 'your_password',\n        'db_name': 'example_db',  # MySQL database name\n    }\n}\n\nclass Category(MySQLModel):\n    table_name = 'categories'\n    title = CharField(max_length=200, unique=True)\n\n    def __init__(self, **kwargs):\n        super().__init__(db_config=DATABASE_CONFIG['mysql'], **kwargs)\n\nclass Post(MySQLModel):\n    table_name = 'posts'\n    title = CharField(max_length=100, unique=True)\n    create_time = DateTimeField(auto_now=True)\n    category = ForeignKey(Category)\n\n    def __init__(self, **kwargs):\n        super().__init__(db_config=DATABASE_CONFIG['mysql'], **kwargs)\n</code></pre>"},{"location":"index.html#creating-tables","title":"Creating Tables","text":"<p>Create the tables in the database by calling the <code>create_table</code> method on your model classes:</p> <pre><code>if __name__ == \"__main__\":\n    Category.create_table()\n    Post.create_table()\n</code></pre>"},{"location":"index.html#adding-data","title":"Adding Data","text":"<p>You can add new records to the database using the <code>create</code> method:</p> <pre><code># Adding a new category\nCategory.create(title='Movies')\n\n# Adding a new post\ncategory = Category.get(id=1)  # Fetch the category with ID 1\nif category:\n    Post.create(title='Godfather', category=category.id)\n</code></pre>"},{"location":"index.html#querying-data","title":"Querying Data","text":"<p>Retrieve all records or filter records based on criteria:</p> <pre><code># Retrieve all posts\nall_posts = Post.all()\nprint(\"All Posts:\", [(post.title, post.category) for post in all_posts])\n\n# Retrieve a specific post\npost_data = Post.get(id=1)\nif post_data:\n    print(\"Post with ID 1:\", post_data.title, post_data.category)\n\n# Filter posts by category\nfiltered_posts = Post.filter(category=category.id)\nprint(\"Filtered Posts:\", [(post.title, post.category) for post in filtered_posts])\n</code></pre>"},{"location":"index.html#updating-records","title":"Updating Records","text":"<p>Update existing records with the <code>update</code> method:</p> <pre><code>Update existing records with the update method:\n</code></pre>"},{"location":"index.html#deleting-records","title":"Deleting Records","text":"<p>Delete records using the <code>delete</code> method:</p> <pre><code>Post.delete(1)\n</code></pre>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Contributions are welcome! If you find any issues or have suggestions for improvements, please open an issue or submit a pull request on github.</p>"},{"location":"index.html#license","title":"License","text":"<p>This project is licensed under the MIT License - see the License file for details.</p>"},{"location":"index.html#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Python: The language used for this project</li> <li>SQLite: The database used for this project</li> <li>setuptools: The tool used for packaging and distributing the library</li> </ul>"}]}